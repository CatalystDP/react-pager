(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["Pager"] = factory(require("react"), require("react-dom"));
	else
		root["Pager"] = factory(root["react"], root["react-dom"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(2);
	var util = {
	    extend: function extend(target) {
	        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	            args[_key - 1] = arguments[_key];
	        }
	
	        for (var i = 0, len = args.length; i < len; ++i) {
	            for (var key in args[i]) {
	                target[key] = args[i][key];
	            }
	        }
	    },
	    is: function is(obj, type) {
	        return Object.prototype.toString.call(obj).split(' ')[1].substr(-20).replace(']', '').toLowerCase() === type;
	    },
	    isObject: function isObject(obj) {
	        return util.is(obj, 'object');
	    },
	    isArray: function isArray(obj) {
	        return util.is(obj, 'array');
	    },
	    isFunction: function isFunction(obj) {
	        return util.is(obj, 'function');
	    },
	
	    css: {
	        addClass: function addClass(element, className) {
	            if (className) {
	                if (element.classList) {
	                    element.classList.add(className);
	                } else if (!util.css.hasClass(element, className)) {
	                    element.className = element.className + ' ' + className;
	                }
	            }
	            return element;
	        },
	        removeClass: function removeClass(element, className) {
	            if (className) {
	                if (element.classList) {
	                    element.classList.remove(className);
	                } else if (util.css.hasClass(element, className)) {
	                    element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ') // multiple spaces to one
	                    .replace(/^\s*|\s*$/g, ''); // trim the ends
	                }
	            }
	            return element;
	        },
	        hasClass: function hasClass(element, className) {
	            if (element.classList) {
	                return !!className && element.classList.contains(className);
	            }
	            return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	        }
	    }
	};
	/**
	 *
	 * @type {{INIT: number, TONEW: number, TOOLD: number}}
	 * 0 means init
	 */
	var DIRECTION = {
	    INIT: 0,
	    TONEW: -1,
	    TOOLD: 1
	};
	
	var PagerError = function (_Error) {
	    _inherits(PagerError, _Error);
	
	    function PagerError(message) {
	        _classCallCheck(this, PagerError);
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PagerError).call(this, message));
	
	        _this.name = 'PagerError';
	        return _this;
	    }
	
	    return PagerError;
	}(Error);
	
	/**
	 *
	 * @param opts
	 *      @param [opts.animation] 当enableAnimation=true并且传入了transitionGroup有效
	 *             @param [opts.animation.beforeEnter(el,direction,page)]
	 *             @param [opts.animation.enter(el,direction,callback,page)]动画结束后要调用callback
	 *             @param [opts.animation.afterenter(el,direction,page)]
	 *             @param [opts.animation.beforeLeave(el,direction,page)]
	 *             @param [opts.animation.leave(el,direction,callback,page)]动画结束后要调用callback
	 *             @param [opts.animation.afterLeave(el,direction,page)]
	 *      @param [opts.enableAnimation] true表示使用动画
	 *      **** enableAnimation=true && 传入了cssTransitionGroup 情况下传 ****
	 *      @param css css类名对象
	 *             [css.transition] 用来执行过渡的类名可以放入transision必需的css属性
	 *             css.forward 正向css类名 需要实现类名 xxx-enter xxx-enter-active xxx-leave xxx-leave-active
	 *             css.backward 反向css类名 名称规则同css.forward
	 *      @param duration 动画持续时间 单位 ms
	 *      ****************************************
	 * @description 
	 *              动画钩子内的direction是用来判断页面切换的方向的 TOOLD表示老的页面要出来了 TONEW表示新页面要进来，INIT 表示初始化
	 * @returns {*}
	 */
	
	
	function createPager() {
	    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    var TransitionGroup = opts.transitionGroup;
	    var CssTransitionGroup = opts.cssTransitionGroup;
	    var css = opts.css || {};
	    var animationObj = opts.animation || {};
	    var duration = typeof opts.duration != 'undefined' ? opts.duration : 300;
	    var direction = DIRECTION.INIT;
	    var lockTarget = opts.lockTarget || document.getElementsByTagName('body')[0]; //默认锁body元素
	    var Container = React.createClass({
	        displayName: 'Container',
	
	        name: 'Container',
	        componentWillMount: function componentWillMount() {},
	        componentDidMount: function componentDidMount() {
	            var page = this.props.page;
	            this.el = ReactDOM.findDOMNode(this);
	            util.isFunction(animationObj.beforeEnter) && opts.enableAnimation && animationObj.beforeEnter(this.el, direction, page);
	        },
	        componentWillEnter: function componentWillEnter(done) {
	            var _this2 = this;
	
	            var page = this.props.page;
	            var _done2 = function _done() {
	                _done2 = null;
	                done();
	                util.isFunction(animationObj.afterEnter) && animationObj.afterEnter(_this2.el, direction, page);
	            };
	            if (util.isFunction(animationObj.enter)) {
	                animationObj.enter(this.el, direction, _done2, page);
	            } else {
	                _done2();
	            }
	        },
	        componentWillUnmount: function componentWillUnmount() {
	            var page = this.props.page;
	            util.isFunction(animationObj.afterLeave) && opts.enableAnimation && animationObj.afterLeave(this.el, direction, page);
	        },
	        componentWillLeave: function componentWillLeave(done) {
	            var page = this.props.page;
	            util.isFunction(animationObj.beforeLeave) && animationObj.beforeLeave(this.el, direction, page);
	            util.isFunction(animationObj.leave) ? animationObj.leave(this.el, direction, done, page) : done();
	        },
	        render: function render() {
	            return React.createElement(
	                'div',
	                { style: this.props.style, className: this.props.className },
	                this.props.children
	            );
	        }
	    });
	    function Wrap(props) {
	        return React.createElement(
	            'div',
	            { style: { width: '100%', height: '100%' } },
	            props.children
	        );
	    }
	    var WRAPCLASS = 'pager-wrap';
	    var Pager = React.createClass({
	        displayName: 'Pager',
	
	        name: 'Pager',
	        getInitialState: function getInitialState() {
	            this.direction = DIRECTION.INIT;
	            this._isAnimating = false;
	            this._animationTimeoutQueue = [];
	            this._animationQueue = [];
	            this.stack = [];
	            this.pageStack = []; //save React Component 
	            return {};
	        },
	        componentWillMount: function componentWillMount() {
	            // if (!this.props.initPage||!this.props.initComponent) {
	            //     throw Error('props Error');
	            // }
	        },
	        componentDidMount: function componentDidMount() {
	            this.el = this.refs.container;
	            // this._changePage(this.props.initPage, this.props.initComponent);
	        },
	        animate: function animate(target, cssProps, time, callback, easingFunc) {
	            target.style.transition = 'all ' + time + 's';
	            var timout = setTimeout(function () {
	                callback();
	            }, time * 1000 + 25);
	            this.enqueueTimeout(setTimeout(function () {
	                util.extend(target.style, cssProps);
	            }, 25));
	            this.enqueueTimeout(timout);
	        },
	        animateDone: function animateDone(curNode) {
	            console.log('animate done');
	            this._isAnimating = false;
	            this.hide(curNode);
	            this.clearTimeQueue();
	            this._dequeue();
	        },
	        stopAnimate: function stopAnimate() {
	            if (!this._isAnimating) return;
	            console.log('animate stop');
	            this.clearTimeQueue();
	            this._isAnimating = false;
	        },
	        enqueueTimeout: function enqueueTimeout(timeout) {
	            this._animationTimeoutQueue.push(timeout);
	        },
	        clearTimeQueue: function clearTimeQueue() {
	            while (this._animationTimeoutQueue.length > 0) {
	                var t = this._animationTimeoutQueue.pop();
	                clearTimeout(t);
	            }
	        },
	
	        /**
	         * @done 当前动画执行完回调
	         */
	        startAnimation: function startAnimation(done) {
	            var _this3 = this;
	
	            this._animationQueue.push({
	                direction: this.direction,
	                fn: function fn(direction) {
	
	                    if (util.isFunction(_this3.props.onAnimate)) {
	                        var children = _this3.getChildren();
	                        var len = children.length;
	                        var cur = void 0,
	                            next = void 0;
	                        if (direction == DIRECTION.TONEW) {
	                            cur = children[len - 2];
	                            next = children[len - 1];
	                        } else if (direction == DIRECTION.TOOLD) {
	                            cur = children[len - 1];
	                            next = children[len - 2];
	                        }
	                        direction != DIRECTION.INIT ? _this3.props.onAnimate.apply(_this3, [cur, next, _this3.animateDone.bind(_this3, cur), direction]) : function () {
	                            this._dequeue();this._isAnimating = false;
	                        }.bind(_this3)();
	                    }
	                }
	            });
	            if (this._animationQueue.length === 1) {
	                this._dequeue();
	                //动画队列里只有一个时，直接执行
	            }
	        },
	        _dequeue: function _dequeue() {
	            if (this._animationQueue.length == 0) return;
	            if (this._isAnimating) return; //当前动画执行完才行继续执行
	            this._isAnimating = true;
	            var t = this._animationQueue.shift();
	            t.fn(t.direction);
	        },
	        navigateTo: function navigateTo(page, component) {
	            this._changePage(page, component);
	        },
	        _getStackTop: function _getStackTop() {
	            var len = this.stack.length;
	            return len - 1;
	        },
	        _changePage: function _changePage(page, Component) {
	            var len = this.stack.length;
	            if (this.stack[len - 1] == page) return false;
	            var index = this.stack.indexOf(page);
	            this.stopAnimate();
	            if (index != -1) {
	                var cArr = this.stack.splice(index + 1);
	                // let cArr = this.pageStack.splice(index + 1);
	                this._popCurPage(index + 1);
	                this.direction = DIRECTION.TOOLD; //old will display
	            } else {
	                this.stack.push(page);
	                // this.pageStack.push(Component);
	                //新的出现
	                this.direction = DIRECTION.TONEW;
	                if (this.stack.length <= 1) {
	                    this.direction = DIRECTION.INIT;
	                }
	                this._addNewPage(Component);
	            }
	            return true;
	        },
	        getChildren: function getChildren() {
	            return this.el.querySelectorAll('.' + WRAPCLASS);
	        },
	        getLastChild: function getLastChild() {
	            var children = this.getChildren();
	            var len = children.length;
	            if (len == 0) return null;
	            return children[len - 1];
	        },
	        hide: function hide(node) {
	            if (node) {
	                node.style.display = 'none';
	            }
	        },
	        show: function show(node) {
	            if (node) {
	                node.style.removeProperty('display');
	            }
	        },
	        _popCurPage: function _popCurPage(index) {
	            //index  以及之后child element 全部删掉
	            var children = this.getChildren(),
	                len = children.length - 1;
	            for (; index < len; ++index) {
	                this.el.removeChild(children[index]);
	                ReactDOM.unmountComponentAtNode(children[index]);
	            }
	            //动画的dom为 当前移走,index-1移入
	            children = this.getChildren();
	            var oldToShow = children[children.length - 2];
	            var lastChild = this.getLastChild();
	            try {
	                ReactDOM.unmountComponentAtNode(lastChild);
	            } catch (e) {}
	            this.el.removeChild(this.getLastChild());
	            this.show(oldToShow);
	            lastChild = null;
	        },
	        _addNewPage: function _addNewPage(Component) {
	            var _this4 = this;
	
	            var div = document.createElement('div');
	            div.className = WRAPCLASS;
	            div.style.width = '100%';
	            div.style.height = '100%';
	            util.extend(div.style, this.props.wrapStyle || {});
	            var w = React.createElement(
	                Wrap,
	                null,
	                Component
	            );
	            ReactDOM.render(w, div);
	            var lastChild = this.getLastChild();
	            if (this.props.enableAnimation && util.isFunction(this.props.onBeforeAnimation)) {
	                this.props.onBeforeAnimation.call(this, lastChild, div, this.direction);
	            }
	            this.el.appendChild(div);
	            var hideLast = function hideLast() {
	                if (lastChild) {
	                    _this4.hide(lastChild);
	                }
	            };
	            if (this.props.enableAnimation) {
	                this.startAnimation();
	            } else {
	                hideLast();
	            }
	        },
	        render: function render() {
	
	            return React.createElement('div', { ref: 'container', style: { width: '100%', height: '100%' } });
	        }
	    });
	    Pager.lock = function () {
	        if (direction == DIRECTION.INIT) {
	            Pager.unlock();
	            return;
	        }
	        lockTarget.style.pointerEvents = 'none';
	    };
	    Pager.unlock = function () {
	        lockTarget.style.pointerEvents = 'auto';
	    };
	    Pager.Animation = React.createClass({
	        displayName: 'Animation',
	
	        name: 'Pager.Animation',
	
	        _copyComponentList: function _copyComponentList() {
	            this.list = this.props.children.slice(0);
	        },
	        componentWillMount: function componentWillMount() {
	            this._queue = [];
	            this.type = this.props.type;
	            this._copyComponentList();
	        },
	        componentDidMount: function componentDidMount() {
	            this.startAnimation();
	        },
	        componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
	            //开始判断当前lsit 和下次的
	        },
	        componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
	            this.startAnimation();
	        },
	        render: function render() {
	            return React.createElement(
	                'div',
	                { ref: "container", style: { width: '100%', height: '100%' } },
	                this.props.children
	            );
	        }
	    });
	    Pager.DIRECTION = DIRECTION;
	    Pager.Animation.type = {
	        ENTER: 1,
	        LEAVE: -1
	    };
	    return Pager;
	}
	
	module.exports = {
	    createPager: createPager
	};

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,